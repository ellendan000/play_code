sourceSets {
    integTest {
        compileClasspath += sourceSets.main.output
        runtimeClasspath += sourceSets.main.output
    }
}

configurations {
    integTestImplementation.extendsFrom implementation
    integTestRuntimeOnly.extendsFrom runtimeOnly
}

dependencies {
    integTestImplementation 'org.springframework.boot:spring-boot-starter-test'
    integTestImplementation 'org.springframework.security:spring-security-test'
    integTestImplementation 'io.rest-assured:rest-assured:3.2.0'
    integTestImplementation 'io.rest-assured:spring-mock-mvc:3.2.0'
    integTestImplementation 'ch.vorburger.mariaDB4j:mariaDB4j-springboot:2.4.0'
    integTestImplementation 'org.mariadb.jdbc:mariadb-java-client:2.2.5'

    integTestImplementation 'org.junit.jupiter:junit-jupiter-api'
    integTestImplementation 'org.junit.jupiter:junit-jupiter-params'
    integTestImplementation 'org.junit.jupiter:junit-jupiter-engine'
}

task integTest(type: Test) {
    description = 'Runs integration tests.'
    group = 'tests'

    testClassesDirs = sourceSets.integTest.output.classesDirs
    classpath = sourceSets.integTest.runtimeClasspath
    shouldRunAfter test

    useJUnitPlatform()
    forkEvery = 5
    maxParallelForks = Runtime.runtime.availableProcessors() / 2

    finalizedBy 'jacocoTestReportForIntegTest'
}
check.dependsOn integTest

apply plugin: 'jacoco'
jacoco {
    toolVersion = "0.8.5"
}

def classFiles = files(files("$buildDir/classes/java/main").files.collect {
    fileTree(dir: it, includes: [
            'top/bujiaban/test/interfaces/**/*',
            'top/bujiaban/test/infrastructure/**/*',
    ], excludes: [
            "**/*MapperImpl.class"
    ])
})
def sourceFiles = files('./src/main/java')

task jacocoTestReportForIntegTest(type: JacocoReport) {
    dependsOn integTest
    finalizedBy 'jacocoTestCoverageVerificationForIntegTest'
    executionData integTest

    reports {
        csv.enabled false
        xml.enabled true
        xml.destination file("${buildDir}/reports/jacoco/integTest.xml")
        html.destination file("${buildDir}/reports/jacoco/integTest/html")
    }

    afterEvaluate {
        getClassDirectories().setFrom(classFiles)
        getSourceDirectories().setFrom(sourceFiles)
    }
}

task jacocoTestCoverageVerificationForIntegTest(type: JacocoCoverageVerification) {
    executionData integTest
    afterEvaluate {
        getClassDirectories().setFrom(classFiles)
    }
    violationRules {
        rule {
            limit {
                counter = 'BRANCH'
                value = 'COVEREDRATIO'
                minimum = 0.95
            }
        }
    }
}